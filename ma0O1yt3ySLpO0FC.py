# -*- coding: utf-8 -*-
"""nrx8efBfNeVfTtcC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CgNR7W9XH1avVBd_V3EzuB0G9E99lwrZ

# **Pre-Processing**
"""

#cd /content/drive/MyDrive/Term Deposit Marketing

#!gdown https://drive.google.com/uc?id=1EW-XMnGfxn-qzGtGPa3v_C63Yqj2aGf7  #downloading the data

#importing required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.metrics import confusion_matrix, accuracy_score
from catboost import CatBoostClassifier, cv, Pool

data = pd.read_csv("/content/drive/MyDrive/Term Deposit Marketing/term-deposit-marketing-2020.csv")
data.head()

data.info() 
#no missing data

data.describe()

data_age=data[["age","y"]]
data_age.describe()

"""# **Plotting**"""

sns.violinplot(x="y",y="age",data=data_age)
plt.show()

plt.figure(figsize=(15,10))
sns.countplot(x="job",hue="y",data=data)
plt.show()

sns.countplot(x="marital",hue="y",data=data)
plt.show()

sns.countplot(x="education",hue="y",data=data)
plt.show()

sns.countplot(x="housing",hue="y",data=data)
plt.show()

sns.countplot(x="loan",hue="y",data=data)
plt.show()

sns.countplot(x="default",hue="y",data=data)
plt.show()

"""# **Data Preparing**

**Mapping**
"""

df = data

df['job']=df['job'].map({'blue-collar':0,'management':1,'technician':2,'admin':3,'services':4,'retired':5,'self-employed':6
                         ,'entrepreneur':7,'unemployed':8,'housemaid':9,'student':10,'unknown':11})
df['month']=df['month'].map({'may':0,'jul':1,'aug':2,'jun':3,'nov':4,'apr':5,'feb':6
                         ,'jan':7,'mar':8,'oct':9,'dec':10})
df['marital']=df['marital'].map({'married':0,'single':1,'divorced':2})
df['education']=df['education'].map({'unknown':0,'primary':1,'tertiary':2,'secondary':3})
df['contact']=df['contact'].map({'cellular':0,'unknown':1,'telephone':2})
df['default']=df['default'].map({'no':0,'yes':1})
df['housing']=df['housing'].map({'no':0,'yes':1})
df['loan']=df['loan'].map({'no':0,'yes':1})
df['y']=df['y'].map({'no':0,'yes':1})

df.head()

"""# **Building Model**

**Splitting into test and train datas**
"""

x_train=df.drop(labels=['y'],axis=1)
y_train=df['y'].astype(int)
X_train,X_test,Y_train,Y_test = train_test_split(x_train,y_train,test_size=0.25, random_state=2)

kfold = StratifiedKFold(n_splits=5) #5-fold cross validation as you wish

"""**Building model and training**"""

model = CatBoostClassifier()
model.fit(X_test,Y_test)

y_pred=model.predict(X_test)
y_true=pd.DataFrame(Y_test)
from sklearn.metrics import classification_report
model_report=classification_report(y_true,y_pred,output_dict=True)
pd.DataFrame(model_report)

"""# **Plotting the result**
# **0.976 ACCURACY!**
"""

plt.figure(figsize=(20,5))
important=cb.get_feature_importance(prettified=True).head(10)
sns.barplot(x="Feature Id",y="Importances",data=important)
score=model.score(X_test,Y_test)
plt.title('Accuracy: '+str(score))
plt.show()

"""**Saving model**"""

model.save_model("model", format="cbm")

